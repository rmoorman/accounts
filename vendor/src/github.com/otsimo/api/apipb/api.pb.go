// Code generated by protoc-gen-gogo.
// source: api.proto
// DO NOT EDIT!

/*
	Package apipb is a generated protocol buffer package.

	It is generated from these files:
		api.proto
		listener.proto
		messages.proto
		registry.proto
		search.proto

	It has these top-level messages:
		Event
		Address
		Profile
		ChildGameEntry
		Child
		Author
		GameMetadata
		GameManifest
		Game
		GameRelease
		UploadToken
		GetProfileRequest
		GetChildRequest
		GetGameRequest
		GetGameFromNameRequest
		GetGameSettingRequest
		GameActivationRequest
		PublishResponse
		ValidateRequest
		IndexRequest
		SearchResult
		SearchRequest
		SearchResponse
		GetLatestVersionsRequest
		GameAndVersion
		GameVersionsResponse
		Response
*/
package apipb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ApiService service

type ApiServiceClient interface {
	// Profile
	AddProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Response, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	UpdateProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Response, error)
	// Child
	AddChild(ctx context.Context, in *Child, opts ...grpc.CallOption) (*Response, error)
	GetChild(ctx context.Context, in *GetChildRequest, opts ...grpc.CallOption) (*Child, error)
	UpdateChild(ctx context.Context, in *Child, opts ...grpc.CallOption) (*Response, error)
	AddGameToChildren(ctx context.Context, in *GameActivationRequest, opts ...grpc.CallOption) (*Response, error)
	ActivateGame(ctx context.Context, in *GameActivationRequest, opts ...grpc.CallOption) (*Response, error)
	// Game
	GetGameFromID(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GameRelease, error)
	GetGameFromUniqueName(ctx context.Context, in *GetGameFromNameRequest, opts ...grpc.CallOption) (*GameRelease, error)
	AddValidatedRelease(ctx context.Context, in *GameRelease, opts ...grpc.CallOption) (*Response, error)
	SearchGame(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) AddProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.ApiService/AddProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/apipb.ApiService/GetProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.ApiService/UpdateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddChild(ctx context.Context, in *Child, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.ApiService/AddChild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetChild(ctx context.Context, in *GetChildRequest, opts ...grpc.CallOption) (*Child, error) {
	out := new(Child)
	err := grpc.Invoke(ctx, "/apipb.ApiService/GetChild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateChild(ctx context.Context, in *Child, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.ApiService/UpdateChild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddGameToChildren(ctx context.Context, in *GameActivationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.ApiService/AddGameToChildren", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ActivateGame(ctx context.Context, in *GameActivationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.ApiService/ActivateGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetGameFromID(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GameRelease, error) {
	out := new(GameRelease)
	err := grpc.Invoke(ctx, "/apipb.ApiService/GetGameFromID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetGameFromUniqueName(ctx context.Context, in *GetGameFromNameRequest, opts ...grpc.CallOption) (*GameRelease, error) {
	out := new(GameRelease)
	err := grpc.Invoke(ctx, "/apipb.ApiService/GetGameFromUniqueName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddValidatedRelease(ctx context.Context, in *GameRelease, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/apipb.ApiService/AddValidatedRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SearchGame(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/apipb.ApiService/SearchGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	// Profile
	AddProfile(context.Context, *Profile) (*Response, error)
	GetProfile(context.Context, *GetProfileRequest) (*Profile, error)
	UpdateProfile(context.Context, *Profile) (*Response, error)
	// Child
	AddChild(context.Context, *Child) (*Response, error)
	GetChild(context.Context, *GetChildRequest) (*Child, error)
	UpdateChild(context.Context, *Child) (*Response, error)
	AddGameToChildren(context.Context, *GameActivationRequest) (*Response, error)
	ActivateGame(context.Context, *GameActivationRequest) (*Response, error)
	// Game
	GetGameFromID(context.Context, *GetGameRequest) (*GameRelease, error)
	GetGameFromUniqueName(context.Context, *GetGameFromNameRequest) (*GameRelease, error)
	AddValidatedRelease(context.Context, *GameRelease) (*Response, error)
	SearchGame(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).AddProfile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).GetProfile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).UpdateProfile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_AddChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Child)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).AddChild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_GetChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).GetChild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_UpdateChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Child)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).UpdateChild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_AddGameToChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GameActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).AddGameToChildren(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_ActivateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GameActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).ActivateGame(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_GetGameFromID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).GetGameFromID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_GetGameFromUniqueName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetGameFromNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).GetGameFromUniqueName(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_AddValidatedRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GameRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).AddValidatedRelease(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ApiService_SearchGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ApiServiceServer).SearchGame(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProfile",
			Handler:    _ApiService_AddProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ApiService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ApiService_UpdateProfile_Handler,
		},
		{
			MethodName: "AddChild",
			Handler:    _ApiService_AddChild_Handler,
		},
		{
			MethodName: "GetChild",
			Handler:    _ApiService_GetChild_Handler,
		},
		{
			MethodName: "UpdateChild",
			Handler:    _ApiService_UpdateChild_Handler,
		},
		{
			MethodName: "AddGameToChildren",
			Handler:    _ApiService_AddGameToChildren_Handler,
		},
		{
			MethodName: "ActivateGame",
			Handler:    _ApiService_ActivateGame_Handler,
		},
		{
			MethodName: "GetGameFromID",
			Handler:    _ApiService_GetGameFromID_Handler,
		},
		{
			MethodName: "GetGameFromUniqueName",
			Handler:    _ApiService_GetGameFromUniqueName_Handler,
		},
		{
			MethodName: "AddValidatedRelease",
			Handler:    _ApiService_AddValidatedRelease_Handler,
		},
		{
			MethodName: "SearchGame",
			Handler:    _ApiService_SearchGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
